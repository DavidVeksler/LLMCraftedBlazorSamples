@page "/Users/edit"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PayTech.BackOffice.Core.DomainServices
@using PayTech.BackOffice.Data.Authentication
@using PayTech.BackOffice.Data.Types
@using PayTech.BackOffice.Services.Email
@inject UserDbContext DB
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject GeolocationService GeolocationService
@inject ICustomerEmailService CustomerEmailService

<PageTitle>Edit User @ApplicationUser</PageTitle>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<div class="container my-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h2 class="mb-0 fs-4"><i class="bi bi-person-gear me-2"></i>Edit User: @ApplicationUser?.FullName</h2>
                    <a href="/Users" class="btn btn-outline-light btn-sm">
                        <i class="bi bi-arrow-left me-1"></i>Back to List
                    </a>
                </div>
                <div class="card-body">

                    @if (ApplicationUser is null)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <EditForm method="post" Model="ApplicationUser" OnValidSubmit="UpdateApplicationUser" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />
                            <input type="hidden" name="ApplicationUser.Id" value="@ApplicationUser.Id" />

                            <h4 class="mb-3"><i class="bi bi-person-vcard me-2"></i>Primary User Information</h4>
                            <div class="row g-3 mb-3">
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputText id="firstname" @bind-Value="ApplicationUser.FirstName" class="form-control" placeholder="First Name" />
                                        <label for="firstname"><i class="bi bi-person me-2"></i>First Name</label>
                                        <ValidationMessage For="() => ApplicationUser.FirstName" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <InputText id="lastname" @bind-Value="ApplicationUser.LastName" class="form-control" placeholder="Last Name" />
                                        <label for="lastname"><i class="bi bi-person-fill me-2"></i>Last Name</label>
                                        <ValidationMessage For="() => ApplicationUser.LastName" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <div class="form-floating mb-3">
                                <InputText id="email" @bind-Value="ApplicationUser.Email" class="form-control" placeholder="Email" />
                                <label for="email"><i class="bi bi-envelope me-2"></i>Email</label>
                                <ValidationMessage For="() => ApplicationUser.Email" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText id="phonenumber" @bind-Value="ApplicationUser.PhoneNumber" class="form-control" placeholder="Phone Number" />
                                <label for="phonenumber"><i class="bi bi-telephone me-2"></i>Phone Number</label>
                                <ValidationMessage For="() => ApplicationUser.PhoneNumber" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputSelect id="kycLevel" @bind-Value="ApplicationUser.KycLevel" class="form-select">
                                    @foreach (var level in Enum.GetValues<KycLevel>())
                                    {
                                        <option value="@level">@level</option>
                                    }
                                </InputSelect>
                                <label for="kycLevel"><i class="bi bi-shield-check me-2"></i>KYC Level</label>
                                <ValidationMessage For="() => ApplicationUser.KycLevel" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="roles" class="form-label"><i class="bi bi-person-badge me-2"></i>Roles</label>
                                <InputSelect id="roles" class="form-select" multiple @bind-Value="SelectedRoleIds">
                                    @foreach (var role in AllRoles)
                                    {
                                        <option value="@role.Id">@role.Name</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="mb-4">
                                <button class="btn btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#additionalDetails" aria-expanded="false" aria-controls="additionalDetails">
                                    <i class="bi bi-chevron-down me-2"></i>Additional User Details
                                </button>
                            </div>

                            <div class="collapse" id="additionalDetails">
                                <div class="card card-body bg-light mb-3">
                                    <h5 class="mb-3"><i class="bi bi-gear-fill me-2"></i>Advanced Settings</h5>
                                    <div class="form-floating mb-3">
                                        <InputText id="normalizedusername" @bind-Value="ApplicationUser.NormalizedUserName" class="form-control" placeholder="Normalized Username" />
                                        <label for="normalizedusername"><i class="bi bi-person-fill-up me-2"></i>Normalized Username</label>
                                        <ValidationMessage For="() => ApplicationUser.NormalizedUserName" class="text-danger" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText id="normalizedemail" @bind-Value="ApplicationUser.NormalizedEmail" class="form-control" placeholder="Normalized Email" />
                                        <label for="normalizedemail"><i class="bi bi-envelope-fill me-2"></i>Normalized Email</label>
                                        <ValidationMessage For="() => ApplicationUser.NormalizedEmail" class="text-danger" />
                                    </div>
                                    <div class="form-check mb-3">
                                        <InputCheckbox id="emailconfirmed" @bind-Value="ApplicationUser.EmailConfirmed" class="form-check-input" />
                                        <label for="emailconfirmed" class="form-check-label"><i class="bi bi-envelope-check me-2"></i>Email Confirmed</label>
                                        <ValidationMessage For="() => ApplicationUser.EmailConfirmed" class="text-danger" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText id="passwordhash" @bind-Value="ApplicationUser.PasswordHash" class="form-control" placeholder="Password Hash" />
                                        <label for="passwordhash"><i class="bi bi-key me-2"></i>Password Hash</label>
                                        <ValidationMessage For="() => ApplicationUser.PasswordHash" class="text-danger" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText id="securitystamp" @bind-Value="ApplicationUser.SecurityStamp" class="form-control" placeholder="Security Stamp" />
                                        <label for="securitystamp"><i class="bi bi-shield-lock me-2"></i>Security Stamp</label>
                                        <ValidationMessage For="() => ApplicationUser.SecurityStamp" class="text-danger" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText id="concurrencystamp" @bind-Value="ApplicationUser.ConcurrencyStamp" class="form-control" placeholder="Concurrency Stamp" />
                                        <label for="concurrencystamp"><i class="bi bi-clock-history me-2"></i>Concurrency Stamp</label>
                                        <ValidationMessage For="() => ApplicationUser.ConcurrencyStamp" class="text-danger" />
                                    </div>
                                    <div class="form-check mb-3">
                                        <InputCheckbox id="phonenumberconfirmed" @bind-Value="ApplicationUser.PhoneNumberConfirmed" class="form-check-input" />
                                        <label for="phonenumberconfirmed" class="form-check-label"><i class="bi bi-telephone-check me-2"></i>Phone Number Confirmed</label>
                                        <ValidationMessage For="() => ApplicationUser.PhoneNumberConfirmed" class="text-danger" />
                                    </div>
                                    <div class="form-check mb-3">
                                        <InputCheckbox id="twofactorenabled" @bind-Value="ApplicationUser.TwoFactorEnabled" class="form-check-input" />
                                        <label for="twofactorenabled" class="form-check-label"><i class="bi bi-shield-lock-fill me-2"></i>Two-Factor Authentication Enabled</label>
                                        <ValidationMessage For="() => ApplicationUser.TwoFactorEnabled" class="text-danger" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputDate id="lockoutend" @bind-Value="ApplicationUser.LockoutEnd" class="form-control" />
                                        <label for="lockoutend"><i class="bi bi-calendar-x me-2"></i>Lockout End</label>
                                        <ValidationMessage For="() => ApplicationUser.LockoutEnd" class="text-danger" />
                                    </div>
                                    <div class="form-check mb-3">
                                        <InputCheckbox id="lockoutenabled" @bind-Value="ApplicationUser.LockoutEnabled" class="form-check-input" />
                                        <label for="lockoutenabled" class="form-check-label"><i class="bi bi-lock me-2"></i>Lockout Enabled</label>
                                        <ValidationMessage For="() => ApplicationUser.LockoutEnabled" class="text-danger" />
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputNumber id="accessfailedcount" @bind-Value="ApplicationUser.AccessFailedCount" class="form-control" />
                                        <label for="accessfailedcount"><i class="bi bi-exclamation-triangle me-2"></i>Access Failed Count</label>
                                        <ValidationMessage For="() => ApplicationUser.AccessFailedCount" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg">
                                    <i class="bi bi-save me-2"></i>Update User
                                </button>
                            </div>
                        </EditForm>


                        <hr />

                        <h4>Last Login Information</h4>
                        <p>Last Login: @ApplicationUser.LastLoginDate</p>
                        <p>IP Address: @ApplicationUser.LastUsedIpAddress</p>
                        @if (GeoLocation != null)
                        {
                            <p>Location: @GeoLocation.City, @GeoLocation.Region, @GeoLocation.Country</p>
                            <p>Coordinates: @GeoLocation.Latitude, @GeoLocation.Longitude</p>
                        }

                        <div class="mt-3">
                            <button class="btn btn-warning" @onclick="ResetPassword">Reset Password</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {




    [SupplyParameterFromQuery] public string Id { get; set; }

    [SupplyParameterFromForm] public ApplicationUser? ApplicationUser { get; set; }

    private List<IdentityRole> AllRoles { get; set; } = new();

    // https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-6-preview-7/
    private string[] SelectedRoleIds { get; set; } = { };

    protected override async Task OnInitializedAsync()
    {
        ApplicationUser ??= await DB.Users.FirstOrDefaultAsync(m => m.Id == Id);

        // ApplicationUser.ApplicationUser ??= PayTechDbContext.ApplicationUsers.Where(p => p.CustomerId == Id).FirstOrDefault();

        // ApplicationUser.ApplicationUser = await DB.ApplicationUsers.FirstOrDefaultAsync(cp => cp.CustomerId == ApplicationUser.Id);

        if (ApplicationUser is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        if (ApplicationUser is not null)
        {
            var userRoles = await DB.UserRoles
                .Where(r => r.UserId == ApplicationUser.Id)
                .ToListAsync();

            SelectedRoleIds = userRoles.Select(r => r.RoleId).ToArray();
            AllRoles = await DB.Roles.ToListAsync();

            if (ApplicationUser != null && !string.IsNullOrEmpty(ApplicationUser.LastUsedIpAddress))
            {
                GeoLocation = await GeolocationService.GetGeolocationDataAsync(ApplicationUser.LastUsedIpAddress);
            }
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateApplicationUser()
    {
        DB.Attach(ApplicationUser).State = EntityState.Modified;

        try
        {
            var existingRoles = await DB.UserRoles
                .Where(r => r.UserId == ApplicationUser.Id)
                .ToListAsync();
            DB.UserRoles.RemoveRange(existingRoles);
            foreach (var roleId in SelectedRoleIds)
            {
                DB.UserRoles.Add(new IdentityUserRole<string>
                {
                    UserId = ApplicationUser.Id,
                    RoleId = roleId
                });
            }

            await DB.SaveChangesAsync();
            
            ShowToast(ToastType.Success, "User Profile Updated");
        }
        catch (DbUpdateConcurrencyException ex)
        {
            if (!ApplicationUserExists(ApplicationUser.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }

            
            ShowToast(ToastType.Success, ex.Message);
        }
    }

    bool ApplicationUserExists(string id)
    {
       // var roles = DB.UserRoles.Where(r => r.UserId == ApplicationUser.Id).ToList();

        return DB.Users.Any(e => e.Id == id);
    }

    

    private GeoLocationData GeoLocation { get; set; }
    private List<ToastMessage> messages = new();

   

    private void ShowToast(ToastType type, string message)
    {
        messages.Add(new ToastMessage { Type = type, Message = message });
    }

    private async Task ResetPassword()
    {
        var token = await UserManager.GeneratePasswordResetTokenAsync(this.ApplicationUser);
        var newPassword = PasswordGenerationService.GenerateRandomPassword();
        var result = await UserManager.ResetPasswordAsync(ApplicationUser, token, newPassword);

        if (result.Succeeded)
        {
            await SendPasswordResetEmail(newPassword);
            ShowToast(ToastType.Success, "Password reset. Check user's email.");
        }
        else
        {
            ShowToast(ToastType.Danger, "Failed to reset password");
        }
    }

    private async Task SendPasswordResetEmail(string newPassword)
    {
        var templateData = new PasswordResetEmailTemplateModel
        {
                FirstName = ApplicationUser.FirstName,
            newPassword = newPassword
            // ResetLink = GeneratePasswordResetLink()
        };

        try
        {
            await CustomerEmailService.SendCustomerTemplatedEmailAsync(ApplicationUser.Email, EmailTemplatesList.PasswordReset.ToString(), templateData);
            ShowToast(ToastType.Info, "Password reset email sent to the user.");
        }
        catch (Exception ex)
        {
            ShowToast(ToastType.Warning, "Failed to send password reset email: " + ex.Message);
        }
    }

}