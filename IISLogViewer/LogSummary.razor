@page "/logs"
@using System.Globalization
@using System.Text.RegularExpressions
@using PayTech.BackOffice.BackOfficeWeb.Controllers
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-center mb-4">
                <i class="bi bi-file-earmark-text-fill me-3"></i>Log Analysis Dashboard
            </h1>
        </div>
    </div>

    <div class="row mb-4">
        <StatCard Title="Total Entries"
                  Icon="bi bi-list-ol"
                  Value="@(logEntries?.Count ?? 0)"
                  BackgroundColor="bg-primary"
                  TextColor="text-white" />

        <StatCard Title="Info Logs"
                  Icon="bi bi-info-circle-fill"
                  Value="@(logEntries?.Count(e => e.Type == "INF") ?? 0)"
                  BackgroundColor="bg-info"
                  TextColor="text-white" />

        <StatCard Title="Warnings"
                  Icon="bi bi-exclamation-triangle-fill"
                  Value="@(logEntries?.Count(e => e.Type == "WRN") ?? 0)"
                  BackgroundColor="bg-warning"
                  TextColor="text-dark" />

        <StatCard Title="Errors"
                  Icon="bi bi-x-circle-fill"
                  Value="@(logEntries?.Count(e => e.Type == "ERR") ?? 0)"
                  BackgroundColor="bg-danger"
                  TextColor="text-white" />
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="mb-3">
                        <label for="webAppSelect" class="form-label">Select a web app:</label>
                        <select id="webAppSelect" class="form-select" @onchange="OnWebAppSelectionChanged">
                            <option value="">-- Select a web app --</option>
                            @foreach (var webApp in webApps)
                            {
                                <option value="@webApp">@webApp</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="logFileSelect" class="form-label">Select a log file:</label>
                        <select id="logFileSelect" class="form-select" @bind="selectedLogFile">
                            <option value="">-- Select a log file --</option>
                            @foreach (var group in GroupLogFilesByMonth())
                            {
                                <optgroup label="@group.Key">
                                    @foreach (var logFile in group)
                                    {
                                        <option value="@logFile">@FormatLogFileName(logFile)</option>
                                    }
                                </optgroup>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Filter log entries:</label>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="showInfoToggle" @bind="showInfo">
                            <label class="form-check-label" for="showInfoToggle">Show INFO entries</label>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="showWarningToggle" @bind="showWarning">
                            <label class="form-check-label" for="showWarningToggle">Show WARNING entries</label>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="showErrorToggle" @bind="showError">
                            <label class="form-check-label" for="showErrorToggle">Show ERROR entries</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="searchInput" class="form-label">Search logs:</label>
                        <input type="text" class="form-control" id="searchInput" @bind="searchTerm" @bind:event="oninput" placeholder="Enter search term...">
                    </div>
                    <button class="btn btn-primary" @onclick="LoadLogContent">
                        <i class="bi bi-cloud-download-fill me-2"></i>Load
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (loading)
    {
        <div class="row">
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    }
    else if (filteredLogEntries != null && filteredLogEntries.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Log Insights</h5>
                        <ul class="list-group">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Most Common Error:
                                <span class="badge bg-primary rounded-pill">@GetMostCommonError()</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Average Response Time:
                                <span class="badge bg-primary rounded-pill">@GetAverageResponseTime() ms</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Errors in Last Hour:
                                <span class="badge bg-primary rounded-pill">@GetErrorsInLastHour()</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

       
        <div class="row">
            <div class="col-12">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>Type</th>
                            <th>Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entry in filteredLogEntries)
                        {
                            <tr class="@GetRowClass(entry.Type)">
                                <td>@entry.Timestamp</td>
                                <td>
                                    <span class="badge @GetBadgeClass(entry.Type)">@entry.Type</span>
                                </td>
                                <td>@entry.Message</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12 text-center">
                <p class="lead">No log entries found in the selected log file.</p>
            </div>
        </div>
    }
</div>

@code {
    private List<string> webApps = new();
    private string selectedWebApp = string.Empty;
    private List<string> logFiles = new();
    private string selectedLogFile = string.Empty;
    private List<LogEntry> logEntries = new();
    private bool loading;

    private bool showInfo = true;
    private bool showWarning = true;
    private bool showError = true;
    private string searchTerm = string.Empty;

    

    private List<LogEntry> filteredLogEntries => logEntries
        .Where(e => (showInfo && e.Type == "INF") ||
                    (showWarning && e.Type == "WRN") ||
                    (showError && e.Type == "ERR"))
        .Where(e => string.IsNullOrEmpty(searchTerm) ||
                    e.Message.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        webApps = Directory.GetDirectories("C:\\web").Select(Path.GetFileName).ToList();
        var baseUri = NavigationManager.BaseUri;
        HttpClient.BaseAddress = new Uri(baseUri);

      
    }



    private async Task OnWebAppSelectionChanged(ChangeEventArgs e)
    {
        selectedWebApp = e.Value.ToString();
        selectedLogFile = string.Empty;
        logEntries.Clear();

        if (!string.IsNullOrEmpty(selectedWebApp))
        {
            try
            {
                logFiles = await HttpClient.GetFromJsonAsync<List<string>>($"api/logs?webApp={selectedWebApp}");
            }
            catch (HttpRequestException ex)
            {
                logFiles = new List<string>();
                Console.WriteLine(ex);
            }
        }
        else
        {
            logFiles.Clear();
        }
    }

    private async Task LoadLogContent()
    {
        if (!string.IsNullOrEmpty(selectedWebApp) && !string.IsNullOrEmpty(selectedLogFile))
        {
            loading = true;
            try
            {
                logEntries = await HttpClient.GetFromJsonAsync<List<LogEntry>>($"/api/logs/{selectedWebApp}/{selectedLogFile}");
                if (logEntries == null || logEntries.Count == 0)
                {
                    Console.WriteLine("No log entries found or unable to parse the response.");
                }
               
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading log content: {ex.Message}");
            }
            finally
            {
                loading = false;
            }
        }
    }

   

    private string GetRowClass(string entryType) =>
        entryType switch
        {
            "ERR" => "table-danger",
            "WRN" => "table-warning",
            _ => ""
        };

    private string GetBadgeClass(string entryType) =>
        entryType switch
        {
            "ERR" => "bg-danger",
            "WRN" => "bg-warning text-dark",
            _ => "bg-info"
        };

    private IEnumerable<IGrouping<string, string>> GroupLogFilesByMonth() =>
        logFiles
            .Select(file => new
            {
                FileName = file,
                Date = ParseDateFromFileName(file)
            })
            .Where(x => x.Date.HasValue)
            .OrderByDescending(x => x.Date)
            .GroupBy(x => x.Date.Value.ToString("MMMM yyyy"),
                x => x.FileName);

    private DateTime? ParseDateFromFileName(string fileName)
    {
        if (DateTime.TryParseExact(
                fileName.Substring(11, 8),
                "yyyyMMdd",
                CultureInfo.InvariantCulture,
                DateTimeStyles.None,
                out DateTime fileDate))
        {
            return fileDate;
        }
        return null;
    }

    private string FormatLogFileName(string fileName)
    {
        var date = ParseDateFromFileName(fileName);
        return date.HasValue
            ? $"{date.Value:dd MMM yyyy} - {fileName}"
            : fileName;
    }

    private string GetMostCommonError()
    {
        var errorMessages = logEntries
            .Where(e => e.Type == "ERR")
            .Select(e => GetErrorType(e.Message))
            .GroupBy(e => e)
            .OrderByDescending(g => g.Count())
            .FirstOrDefault();

        return errorMessages?.Key ?? "No errors found";
    }

    private string GetErrorType(string errorMessage)
    {
        var match = Regex.Match(errorMessage, @"^([a-zA-Z.]+Exception)");
        return match.Success ? match.Groups[1].Value : "Unknown Error";
    }

    private double GetAverageResponseTime()
    {
        var responseTimes = logEntries
            .Where(e => e.Message.Contains("responded"))
            .Select(e =>
            {
                var match = Regex.Match(e.Message, @"responded \d+ in (\d+(\.\d+)?) ms");
                return match.Success && double.TryParse(match.Groups[1].Value, out double time) ? time : 0;
            })
            .Where(t => t > 0);

        return responseTimes.Any() ? Math.Round(responseTimes.Average(), 2) : 0;
    }

    private int GetErrorsInLastHour()
    {
        var oneHourAgo = DateTime.Now.AddHours(-1);
        return logEntries.Count(e => e.Type == "ERR" && DateTime.Parse(e.Timestamp) >= oneHourAgo);
    }
}
