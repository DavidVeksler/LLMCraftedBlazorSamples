@page "/logs"
@using PayTech.BackOffice.BackOfficeWeb.Controllers
@using PayTech.BackOffice.BackOfficeWeb.Services
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-center mb-4">
                <i class="bi bi-file-earmark-text-fill me-3"></i>Log Analysis Dashboard
            </h1>
        </div>
    </div>

    <div class="row mb-4">
        <StatCard Title="Total Entries"
                  Icon="bi bi-list-ol"
                  Value="@(logEntries?.Count ?? 0)"
                  BackgroundColor="bg-primary"
                  TextColor="text-white" />

        <StatCard Title="Info Logs"
                  Icon="bi bi-info-circle-fill"
                  Value="@(logEntries?.Count(e => e.Type == "INF") ?? 0)"
                  BackgroundColor="bg-info"
                  TextColor="text-white" />

        <StatCard Title="Warnings"
                  Icon="bi bi-exclamation-triangle-fill"
                  Value="@(logEntries?.Count(e => e.Type == "WRN") ?? 0)"
                  BackgroundColor="bg-warning"
                  TextColor="text-dark" />

        <StatCard Title="Errors"
                  Icon="bi bi-x-circle-fill"
                  Value="@(logEntries?.Count(e => e.Type == "ERR") ?? 0)"
                  BackgroundColor="bg-danger"
                  TextColor="text-white" />
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="mb-3">
                        <label for="webAppSelect" class="form-label">Select a web app:</label>
                        <select id="webAppSelect" class="form-select" @onchange="OnWebAppSelectionChanged">
                            <option value="">-- Select a web app --</option>
                            @foreach (var webApp in webApps)
                            {
                                <option value="@webApp">@webApp</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="logFileSelect" class="form-label">Select a log file:</label>
                        <select id="logFileSelect" class="form-select" @bind="selectedLogFile">
                            <option value="">-- Select a log file --</option>
                            @foreach (var group in GroupLogFilesByMonth())
                            {
                                <optgroup label="@group.Key">
                                    @foreach (var logFile in group)
                                    {
                                        <option value="@logFile">@FormatLogFileName(logFile)</option>
                                    }
                                </optgroup>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Filter log entries:</label>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="showInfoToggle" @bind="showInfo">
                            <label class="form-check-label" for="showInfoToggle">Show INFO entries</label>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="showWarningToggle" @bind="showWarning">
                            <label class="form-check-label" for="showWarningToggle">Show WARNING entries</label>
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="showErrorToggle" @bind="showError">
                            <label class="form-check-label" for="showErrorToggle">Show ERROR entries</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="searchInput" class="form-label">Search logs:</label>
                        <input type="text" class="form-control" id="searchInput" @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterLogs" placeholder="Enter search term...">
                    </div>
                    <button class="btn btn-primary" @onclick="LoadLogContent">
                        <i class="bi bi-cloud-download-fill me-2"></i>Load
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (loading)
    {
        <div class="row">
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    }
    else if (filteredLogEntries != null && filteredLogEntries.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="accordion" id="logInsightsAccordion">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="logInsightsHeader">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#logInsightsContent" aria-expanded="false" aria-controls="logInsightsContent">
                                <i class="bi bi-graph-up me-2"></i>Log Insights
                            </button>
                        </h2>
                        <div id="logInsightsContent" class="accordion-collapse collapse" aria-labelledby="logInsightsHeader" data-bs-parent="#logInsightsAccordion">
                            <div class="accordion-body">
                                <h5 class="mb-3">Top 5 Most Common Errors:</h5>
                                <ul class="list-group mb-3">
                                    @foreach (var error in mostCommonErrors)
                                    {
                                        <li class="list-group-item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h6 class="mb-1">@error.ExceptionName</h6>
                                                <span class="badge bg-primary rounded-pill">@error.Count</span>
                                            </div>
                                            <small class="text-muted">Sample Messages:</small>
                                            <ul class="list-unstyled mt-2">
                                                @foreach (var message in error.SampleMessages)
                                                {
                                                    <li><small>• @message</small></li>
                                                }
                                            </ul>
                                        </li>
                                    }
                                </ul>
                                <ul class="list-group">
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Average Response Time:
                                        <span class="badge bg-primary rounded-pill">@averageResponseTime ms</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Errors in Last Hour:
                                        <span class="badge bg-primary rounded-pill">@errorsInLastHour</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>Type</th>
                            <th>Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        <Virtualize Items="filteredLogEntries" Context="entry">
                            <tr class="@LogAnalysisHelper.GetRowClass(entry.Type)" @key="(entry.Timestamp +  entry.ProcessId + entry.Message)">
                                <td>@FormatTimestamp(entry.Timestamp)</td>
                                <td>
                                    <span class="badge @LogAnalysisHelper.GetBadgeClass(entry.Type)">@entry.Type</span>
                                </td>
                                <td>@entry.Message</td>
                            </tr>
                        </Virtualize>
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12 text-center">
                <p class="lead">No log entries found in the selected log file.</p>
            </div>
        </div>
    }
</div>

@code {
    private List<string> webApps = new();
    private string selectedWebApp = string.Empty;
    private List<string> logFiles = new();
    private string selectedLogFile = string.Empty;
    private List<LogEntry> logEntries = new();
    private List<LogEntry> filteredLogEntries = new();
    private bool loading;

    private bool showInfo = false;
    private bool showWarning = true;
    private bool showError = true;
    private string searchTerm = string.Empty;

    private List<LogAnalysisHelper.ErrorSummary> mostCommonErrors;
    private double averageResponseTime = 0;
    private int errorsInLastHour = 0;

    private string FormatTimestamp(string timestamp)
    {
        return DateTime.Parse((timestamp)).ToString("hh:mm:ss tt").ToLower();
    }

    protected override async Task OnInitializedAsync()
    {
        webApps = Directory.GetDirectories("C:\\web").Select(Path.GetFileName).ToList();
        var baseUri = NavigationManager.BaseUri;
        HttpClient.BaseAddress = new Uri(baseUri);


        new System.Threading.Timer(async _ =>
        {
            await LoadLogContent();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(5));
    }

    private async Task OnWebAppSelectionChanged(ChangeEventArgs e)
    {
        selectedWebApp = e.Value.ToString();
        selectedLogFile = string.Empty;
        logEntries.Clear();
        filteredLogEntries.Clear();

        if (!string.IsNullOrEmpty(selectedWebApp))
        {
            try
            {
                logFiles = await HttpClient.GetFromJsonAsync<List<string>>($"api/logs?webApp={selectedWebApp}");
            }
            catch (HttpRequestException ex)
            {
                logFiles = new List<string>();
                Console.WriteLine(ex);
            }
        }
        else
        {
            logFiles.Clear();
        }
    }

    private async Task LoadLogContent()
    {
        if (!string.IsNullOrEmpty(selectedWebApp) && !string.IsNullOrEmpty(selectedLogFile))
        {
            loading = true;
            try
            {
                var allLogEntries = await HttpClient.GetFromJsonAsync<List<LogEntry>>($"/api/logs/{selectedWebApp}/{selectedLogFile}");
                if (allLogEntries == null || allLogEntries.Count == 0)
                {
                    Console.WriteLine("No log entries found or unable to parse the response.");
                    logEntries = new List<LogEntry>();
                }
                else
                {
                    // Remove duplicate records based on timestamp and sort by date descending
                    logEntries = allLogEntries
                        .GroupBy(entry => entry.Timestamp)
                        .Select(group => group.First())
                        .OrderByDescending(entry => entry.Timestamp)
                        .ToList();

                    FilterLogs();
                    UpdateInsights();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading log content: {ex.Message}");
                logEntries = new List<LogEntry>();
            }
            finally
            {
                loading = false;
            }
        }
    }

    private void FilterLogs()
    {
        filteredLogEntries = logEntries
            .Where(e => (showInfo && e.Type == "INF") ||
                        (showWarning && e.Type == "WRN") ||
                        (showError && e.Type == "ERR"))
            .Where(e => string.IsNullOrEmpty(searchTerm) ||
                        e.Message.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(e => e.Timestamp)
            .ToList();
    }

    private void UpdateInsights()
    {
        mostCommonErrors = LogAnalysisHelper.GetMostCommonErrors(logEntries);
        averageResponseTime = LogAnalysisHelper.GetAverageResponseTime(logEntries);
        errorsInLastHour = LogAnalysisHelper.GetErrorsInLastHour(logEntries);
    }

    private IEnumerable<IGrouping<string, string>> GroupLogFilesByMonth() =>
        LogAnalysisHelper.GroupLogFilesByMonth(logFiles);

    private string FormatLogFileName(string fileName) =>
        LogAnalysisHelper.FormatLogFileName(fileName);
}