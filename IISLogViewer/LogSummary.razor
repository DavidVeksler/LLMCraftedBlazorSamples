@page "/logs"
@using PayTech.BackOffice.BackOfficeWeb.Controllers
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-center mb-4">
                <i class="bi bi-file-earmark-text-fill me-3"></i>Log Summary
            </h1>
        </div>
    </div>

    <div class="row mb-4">
        <StatCard 
            Title="Total Warnings" 
            Icon="bi bi-exclamation-triangle-fill" 
            Value="@(logEntries?.Count(e => e.Type == "WRN") ?? 0)" 
            BackgroundColor="bg-info" 
            TextColor="text-white" />
    
        <StatCard 
            Title="Total Errors" 
            Icon="bi bi-x-circle-fill" 
            Value="@(logEntries?.Count(e => e.Type == "ERR") ?? 0)" 
            BackgroundColor="bg-danger" 
            TextColor="text-white" />
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="mb-3">
                        <label for="webAppSelect" class="form-label">Select a web app:</label>
                        <select id="webAppSelect" class="form-select" @onchange="OnWebAppSelectionChanged">
                            <option value="">-- Select a web app --</option>
                            @foreach (var webApp in webApps)
                            {
                                <option value="@webApp">@webApp</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="logFileSelect" class="form-label">Select a log file:</label>
                        <select id="logFileSelect" class="form-select" @bind="selectedLogFile">
                            <option value="">-- Select a log file --</option>
                            @foreach (var logFile in logFiles)
                            {
                                <option value="@logFile">@logFile</option>
                            }
                        </select>
                    </div>
                    <button class="btn btn-primary" @onclick="LoadLogContent">
                        <i class="bi bi-cloud-download-fill me-2"></i>Load
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (loading)
    {
        <div class="row">
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    }
    else if (logEntries != null && logEntries.Any())
    {
        <div class="row">
            <div class="col-12">
                <table class="table table-striped table-hover">
                    <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Type</th>
                        <th>Message</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var entry in logEntries)
                    {
                        <tr class="@GetRowClass(entry.Type)">
                            <td>@entry.Timestamp</td>
                            <td>
                                <span class="badge @GetBadgeClass(entry.Type)">@entry.Type</span>
                            </td>
                            <td>@entry.Message</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12 text-center">
                <p class="lead">No log entries found in the selected log file.</p>
            </div>
        </div>
    }
</div>

@code {
    private List<string> webApps = new();
    private string selectedWebApp = string.Empty;
    private List<string> logFiles = new();
    private string selectedLogFile = string.Empty;
    private List<LogEntry> logEntries = new();
    private bool loading;

    protected override void OnInitialized()
    {
        webApps = Directory.GetDirectories("C:\\web").Select(Path.GetFileName).ToList();
        var baseUri = NavigationManager.BaseUri;
        HttpClient.BaseAddress = new Uri(baseUri);
    }

    private async Task OnWebAppSelectionChanged(ChangeEventArgs e)
    {
        selectedWebApp = e.Value.ToString();
        selectedLogFile = string.Empty;
        logEntries.Clear();

        if (!string.IsNullOrEmpty(selectedWebApp))
        {
            try
            {
                logFiles = await HttpClient.GetFromJsonAsync<List<string>>($"api/logs?webApp={selectedWebApp}");
            }
            catch (HttpRequestException ex)
            {
                logFiles = new List<string>();
                Console.WriteLine(ex);
            }
        }
        else
        {
            logFiles.Clear();
        }
    }

    private async Task LoadLogContent()
    {
        if (!string.IsNullOrEmpty(selectedWebApp) && !string.IsNullOrEmpty(selectedLogFile))
        {
            loading = true;
            try
            {
                logEntries = await HttpClient.GetFromJsonAsync<List<LogEntry>>($"/api/logs/{selectedWebApp}/{selectedLogFile}");
                if (logEntries == null || logEntries.Count == 0)
                {
                    // Handle empty or null response
                    Console.WriteLine("No log entries found or unable to parse the response.");
                }
            }
            catch (Exception ex)
            {
                // Handle any exceptions (e.g., network issues, parsing errors)
                Console.WriteLine($"Error loading log content: {ex.Message}");
            }
            finally
            {
                loading = false;
            }
        }
    }


    private string GetRowClass(string entryType)
    {
        return entryType switch
        {
            "ERR" => "table-danger",
            "WRN" => "table-warning",
            _ => ""
        };
    }

    private string GetBadgeClass(string entryType)
    {
        return entryType switch
        {
            "ERR" => "bg-danger",
            "WRN" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }


}